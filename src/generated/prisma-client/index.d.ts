// Code generated by Prisma (prisma@1.23.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  beer: (where?: BeerWhereInput) => Promise<boolean>;
  brewery: (where?: BreweryWhereInput) => Promise<boolean>;
  country: (where?: CountryWhereInput) => Promise<boolean>;
  glass: (where?: GlassWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  style: (where?: StyleWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  beer: (where: BeerWhereUniqueInput) => BeerPromise;
  beers: (
    args?: {
      where?: BeerWhereInput;
      orderBy?: BeerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Beer>;
  beersConnection: (
    args?: {
      where?: BeerWhereInput;
      orderBy?: BeerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BeerConnectionPromise;
  brewery: (where: BreweryWhereUniqueInput) => BreweryPromise;
  breweries: (
    args?: {
      where?: BreweryWhereInput;
      orderBy?: BreweryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Brewery>;
  breweriesConnection: (
    args?: {
      where?: BreweryWhereInput;
      orderBy?: BreweryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BreweryConnectionPromise;
  country: (where: CountryWhereUniqueInput) => CountryPromise;
  countries: (
    args?: {
      where?: CountryWhereInput;
      orderBy?: CountryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Country>;
  countriesConnection: (
    args?: {
      where?: CountryWhereInput;
      orderBy?: CountryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CountryConnectionPromise;
  glass: (where: GlassWhereUniqueInput) => GlassPromise;
  glasses: (
    args?: {
      where?: GlassWhereInput;
      orderBy?: GlassOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Glass>;
  glassesConnection: (
    args?: {
      where?: GlassWhereInput;
      orderBy?: GlassOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GlassConnectionPromise;
  location: (where: LocationWhereUniqueInput) => LocationPromise;
  locations: (
    args?: {
      where?: LocationWhereInput;
      orderBy?: LocationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Location>;
  locationsConnection: (
    args?: {
      where?: LocationWhereInput;
      orderBy?: LocationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LocationConnectionPromise;
  style: (where: StyleWhereUniqueInput) => StylePromise;
  styles: (
    args?: {
      where?: StyleWhereInput;
      orderBy?: StyleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Style>;
  stylesConnection: (
    args?: {
      where?: StyleWhereInput;
      orderBy?: StyleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StyleConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBeer: (data: BeerCreateInput) => BeerPromise;
  updateBeer: (
    args: { data: BeerUpdateInput; where: BeerWhereUniqueInput }
  ) => BeerPromise;
  updateManyBeers: (
    args: { data: BeerUpdateManyMutationInput; where?: BeerWhereInput }
  ) => BatchPayloadPromise;
  upsertBeer: (
    args: {
      where: BeerWhereUniqueInput;
      create: BeerCreateInput;
      update: BeerUpdateInput;
    }
  ) => BeerPromise;
  deleteBeer: (where: BeerWhereUniqueInput) => BeerPromise;
  deleteManyBeers: (where?: BeerWhereInput) => BatchPayloadPromise;
  createBrewery: (data: BreweryCreateInput) => BreweryPromise;
  updateBrewery: (
    args: { data: BreweryUpdateInput; where: BreweryWhereUniqueInput }
  ) => BreweryPromise;
  updateManyBreweries: (
    args: { data: BreweryUpdateManyMutationInput; where?: BreweryWhereInput }
  ) => BatchPayloadPromise;
  upsertBrewery: (
    args: {
      where: BreweryWhereUniqueInput;
      create: BreweryCreateInput;
      update: BreweryUpdateInput;
    }
  ) => BreweryPromise;
  deleteBrewery: (where: BreweryWhereUniqueInput) => BreweryPromise;
  deleteManyBreweries: (where?: BreweryWhereInput) => BatchPayloadPromise;
  createCountry: (data: CountryCreateInput) => CountryPromise;
  updateCountry: (
    args: { data: CountryUpdateInput; where: CountryWhereUniqueInput }
  ) => CountryPromise;
  updateManyCountries: (
    args: { data: CountryUpdateManyMutationInput; where?: CountryWhereInput }
  ) => BatchPayloadPromise;
  upsertCountry: (
    args: {
      where: CountryWhereUniqueInput;
      create: CountryCreateInput;
      update: CountryUpdateInput;
    }
  ) => CountryPromise;
  deleteCountry: (where: CountryWhereUniqueInput) => CountryPromise;
  deleteManyCountries: (where?: CountryWhereInput) => BatchPayloadPromise;
  createGlass: (data: GlassCreateInput) => GlassPromise;
  updateGlass: (
    args: { data: GlassUpdateInput; where: GlassWhereUniqueInput }
  ) => GlassPromise;
  updateManyGlasses: (
    args: { data: GlassUpdateManyMutationInput; where?: GlassWhereInput }
  ) => BatchPayloadPromise;
  upsertGlass: (
    args: {
      where: GlassWhereUniqueInput;
      create: GlassCreateInput;
      update: GlassUpdateInput;
    }
  ) => GlassPromise;
  deleteGlass: (where: GlassWhereUniqueInput) => GlassPromise;
  deleteManyGlasses: (where?: GlassWhereInput) => BatchPayloadPromise;
  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateLocation: (
    args: { data: LocationUpdateInput; where: LocationWhereUniqueInput }
  ) => LocationPromise;
  updateManyLocations: (
    args: { data: LocationUpdateManyMutationInput; where?: LocationWhereInput }
  ) => BatchPayloadPromise;
  upsertLocation: (
    args: {
      where: LocationWhereUniqueInput;
      create: LocationCreateInput;
      update: LocationUpdateInput;
    }
  ) => LocationPromise;
  deleteLocation: (where: LocationWhereUniqueInput) => LocationPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createStyle: (data: StyleCreateInput) => StylePromise;
  updateStyle: (
    args: { data: StyleUpdateInput; where: StyleWhereUniqueInput }
  ) => StylePromise;
  updateManyStyles: (
    args: { data: StyleUpdateManyMutationInput; where?: StyleWhereInput }
  ) => BatchPayloadPromise;
  upsertStyle: (
    args: {
      where: StyleWhereUniqueInput;
      create: StyleCreateInput;
      update: StyleUpdateInput;
    }
  ) => StylePromise;
  deleteStyle: (where: StyleWhereUniqueInput) => StylePromise;
  deleteManyStyles: (where?: StyleWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  beer: (
    where?: BeerSubscriptionWhereInput
  ) => BeerSubscriptionPayloadSubscription;
  brewery: (
    where?: BrewerySubscriptionWhereInput
  ) => BrewerySubscriptionPayloadSubscription;
  country: (
    where?: CountrySubscriptionWhereInput
  ) => CountrySubscriptionPayloadSubscription;
  glass: (
    where?: GlassSubscriptionWhereInput
  ) => GlassSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  style: (
    where?: StyleSubscriptionWhereInput
  ) => StyleSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GlassOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BeerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "picture_ASC"
  | "picture_DESC"
  | "ibu_ASC"
  | "ibu_DESC"
  | "abv_ASC"
  | "abv_DESC"
  | "description_ASC"
  | "description_DESC"
  | "published_ASC"
  | "published_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BreweryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CountryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "countryCode_ASC"
  | "countryCode_DESC"
  | "name_ASC"
  | "name_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "city_ASC"
  | "city_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StyleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface BeerUpdateInput {
  name?: String;
  picture?: String;
  brewery?: BreweryUpdateOneInput;
  style?: StyleUpdateOneInput;
  glass?: GlassUpdateManyInput;
  ibu?: Int;
  abv?: Float;
  description?: String;
  published?: Boolean;
  reviewer?: UserUpdateOneRequiredWithoutBeersReviewedInput;
}

export type BeerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UserUpdateOneRequiredWithoutBeersReviewedInput {
  create?: UserCreateWithoutBeersReviewedInput;
  update?: UserUpdateWithoutBeersReviewedDataInput;
  upsert?: UserUpsertWithoutBeersReviewedInput;
  connect?: UserWhereUniqueInput;
}

export interface CountryUpdateInput {
  countryCode?: String;
  name?: String;
  icon?: String;
}

export interface CountryUpdateOneRequiredInput {
  create?: CountryCreateInput;
  update?: CountryUpdateDataInput;
  upsert?: CountryUpsertNestedInput;
  connect?: CountryWhereUniqueInput;
}

export interface BreweryUpdateManyMutationInput {
  name?: String;
}

export interface StyleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StyleWhereInput;
  AND?: StyleSubscriptionWhereInput[] | StyleSubscriptionWhereInput;
  OR?: StyleSubscriptionWhereInput[] | StyleSubscriptionWhereInput;
  NOT?: StyleSubscriptionWhereInput[] | StyleSubscriptionWhereInput;
}

export interface BreweryUpdateInput {
  name?: String;
  location?: LocationUpdateOneInput;
}

export interface BeerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  picture?: String;
  picture_not?: String;
  picture_in?: String[] | String;
  picture_not_in?: String[] | String;
  picture_lt?: String;
  picture_lte?: String;
  picture_gt?: String;
  picture_gte?: String;
  picture_contains?: String;
  picture_not_contains?: String;
  picture_starts_with?: String;
  picture_not_starts_with?: String;
  picture_ends_with?: String;
  picture_not_ends_with?: String;
  brewery?: BreweryWhereInput;
  style?: StyleWhereInput;
  glass_every?: GlassWhereInput;
  glass_some?: GlassWhereInput;
  glass_none?: GlassWhereInput;
  ibu?: Int;
  ibu_not?: Int;
  ibu_in?: Int[] | Int;
  ibu_not_in?: Int[] | Int;
  ibu_lt?: Int;
  ibu_lte?: Int;
  ibu_gt?: Int;
  ibu_gte?: Int;
  abv?: Float;
  abv_not?: Float;
  abv_in?: Float[] | Float;
  abv_not_in?: Float[] | Float;
  abv_lt?: Float;
  abv_lte?: Float;
  abv_gt?: Float;
  abv_gte?: Float;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  published?: Boolean;
  published_not?: Boolean;
  reviewer?: UserWhereInput;
  AND?: BeerWhereInput[] | BeerWhereInput;
  OR?: BeerWhereInput[] | BeerWhereInput;
  NOT?: BeerWhereInput[] | BeerWhereInput;
}

export interface BeerUpdateManyMutationInput {
  name?: String;
  picture?: String;
  ibu?: Int;
  abv?: Float;
  description?: String;
  published?: Boolean;
}

export interface LocationWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  country?: CountryWhereInput;
  AND?: LocationWhereInput[] | LocationWhereInput;
  OR?: LocationWhereInput[] | LocationWhereInput;
  NOT?: LocationWhereInput[] | LocationWhereInput;
}

export interface StyleWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: StyleWhereInput[] | StyleWhereInput;
  OR?: StyleWhereInput[] | StyleWhereInput;
  NOT?: StyleWhereInput[] | StyleWhereInput;
}

export interface GlassWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: GlassWhereInput[] | GlassWhereInput;
  OR?: GlassWhereInput[] | GlassWhereInput;
  NOT?: GlassWhereInput[] | GlassWhereInput;
}

export interface BeerCreateInput {
  name: String;
  picture?: String;
  brewery?: BreweryCreateOneInput;
  style?: StyleCreateOneInput;
  glass?: GlassCreateManyInput;
  ibu?: Int;
  abv?: Float;
  description?: String;
  published?: Boolean;
  reviewer: UserCreateOneWithoutBeersReviewedInput;
}

export interface CountrySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CountryWhereInput;
  AND?: CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput;
  OR?: CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput;
  NOT?: CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput;
}

export interface BreweryCreateOneInput {
  create?: BreweryCreateInput;
  connect?: BreweryWhereUniqueInput;
}

export interface BeerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BeerWhereInput;
  AND?: BeerSubscriptionWhereInput[] | BeerSubscriptionWhereInput;
  OR?: BeerSubscriptionWhereInput[] | BeerSubscriptionWhereInput;
  NOT?: BeerSubscriptionWhereInput[] | BeerSubscriptionWhereInput;
}

export interface BreweryCreateInput {
  name: String;
  location?: LocationCreateOneInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface LocationCreateOneInput {
  create?: LocationCreateInput;
  connect?: LocationWhereUniqueInput;
}

export interface BeerUpdateManyWithWhereNestedInput {
  where: BeerScalarWhereInput;
  data: BeerUpdateManyDataInput;
}

export interface LocationCreateInput {
  city?: String;
  country: CountryCreateOneInput;
}

export type CountryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  countryCode?: String;
}>;

export interface CountryCreateOneInput {
  create?: CountryCreateInput;
  connect?: CountryWhereUniqueInput;
}

export interface BeerUpdateWithoutReviewerDataInput {
  name?: String;
  picture?: String;
  brewery?: BreweryUpdateOneInput;
  style?: StyleUpdateOneInput;
  glass?: GlassUpdateManyInput;
  ibu?: Int;
  abv?: Float;
  description?: String;
  published?: Boolean;
}

export interface CountryCreateInput {
  countryCode: String;
  name: String;
  icon?: String;
}

export interface BeerUpdateManyWithoutReviewerInput {
  create?: BeerCreateWithoutReviewerInput[] | BeerCreateWithoutReviewerInput;
  delete?: BeerWhereUniqueInput[] | BeerWhereUniqueInput;
  connect?: BeerWhereUniqueInput[] | BeerWhereUniqueInput;
  disconnect?: BeerWhereUniqueInput[] | BeerWhereUniqueInput;
  update?:
    | BeerUpdateWithWhereUniqueWithoutReviewerInput[]
    | BeerUpdateWithWhereUniqueWithoutReviewerInput;
  upsert?:
    | BeerUpsertWithWhereUniqueWithoutReviewerInput[]
    | BeerUpsertWithWhereUniqueWithoutReviewerInput;
  deleteMany?: BeerScalarWhereInput[] | BeerScalarWhereInput;
  updateMany?:
    | BeerUpdateManyWithWhereNestedInput[]
    | BeerUpdateManyWithWhereNestedInput;
}

export interface StyleCreateOneInput {
  create?: StyleCreateInput;
  connect?: StyleWhereUniqueInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  name?: String;
  beersReviewed?: BeerUpdateManyWithoutReviewerInput;
}

export interface StyleCreateInput {
  name: String;
}

export interface BeerCreateManyWithoutReviewerInput {
  create?: BeerCreateWithoutReviewerInput[] | BeerCreateWithoutReviewerInput;
  connect?: BeerWhereUniqueInput[] | BeerWhereUniqueInput;
}

export interface GlassCreateManyInput {
  create?: GlassCreateInput[] | GlassCreateInput;
  connect?: GlassWhereUniqueInput[] | GlassWhereUniqueInput;
}

export interface UserCreateInput {
  email: String;
  password: String;
  name?: String;
  beersReviewed?: BeerCreateManyWithoutReviewerInput;
}

export interface GlassCreateInput {
  name: String;
}

export interface StyleUpdateInput {
  name?: String;
}

export interface UserCreateOneWithoutBeersReviewedInput {
  create?: UserCreateWithoutBeersReviewedInput;
  connect?: UserWhereUniqueInput;
}

export type StyleWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserCreateWithoutBeersReviewedInput {
  email: String;
  password: String;
  name?: String;
}

export interface GlassUpdateManyMutationInput {
  name?: String;
}

export interface UserUpsertWithoutBeersReviewedInput {
  update: UserUpdateWithoutBeersReviewedDataInput;
  create: UserCreateWithoutBeersReviewedInput;
}

export interface CountryUpdateManyMutationInput {
  countryCode?: String;
  name?: String;
  icon?: String;
}

export interface BreweryUpdateOneInput {
  create?: BreweryCreateInput;
  update?: BreweryUpdateDataInput;
  upsert?: BreweryUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: BreweryWhereUniqueInput;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LocationWhereInput;
  AND?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
  OR?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
  NOT?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
}

export interface BreweryUpdateDataInput {
  name?: String;
  location?: LocationUpdateOneInput;
}

export interface CountryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  countryCode?: String;
  countryCode_not?: String;
  countryCode_in?: String[] | String;
  countryCode_not_in?: String[] | String;
  countryCode_lt?: String;
  countryCode_lte?: String;
  countryCode_gt?: String;
  countryCode_gte?: String;
  countryCode_contains?: String;
  countryCode_not_contains?: String;
  countryCode_starts_with?: String;
  countryCode_not_starts_with?: String;
  countryCode_ends_with?: String;
  countryCode_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  icon?: String;
  icon_not?: String;
  icon_in?: String[] | String;
  icon_not_in?: String[] | String;
  icon_lt?: String;
  icon_lte?: String;
  icon_gt?: String;
  icon_gte?: String;
  icon_contains?: String;
  icon_not_contains?: String;
  icon_starts_with?: String;
  icon_not_starts_with?: String;
  icon_ends_with?: String;
  icon_not_ends_with?: String;
  AND?: CountryWhereInput[] | CountryWhereInput;
  OR?: CountryWhereInput[] | CountryWhereInput;
  NOT?: CountryWhereInput[] | CountryWhereInput;
}

export interface LocationUpdateOneInput {
  create?: LocationCreateInput;
  update?: LocationUpdateDataInput;
  upsert?: LocationUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: LocationWhereUniqueInput;
}

export interface GlassSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GlassWhereInput;
  AND?: GlassSubscriptionWhereInput[] | GlassSubscriptionWhereInput;
  OR?: GlassSubscriptionWhereInput[] | GlassSubscriptionWhereInput;
  NOT?: GlassSubscriptionWhereInput[] | GlassSubscriptionWhereInput;
}

export interface LocationUpdateDataInput {
  city?: String;
  country?: CountryUpdateOneRequiredInput;
}

export type BreweryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateWithoutBeersReviewedDataInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface BeerScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  picture?: String;
  picture_not?: String;
  picture_in?: String[] | String;
  picture_not_in?: String[] | String;
  picture_lt?: String;
  picture_lte?: String;
  picture_gt?: String;
  picture_gte?: String;
  picture_contains?: String;
  picture_not_contains?: String;
  picture_starts_with?: String;
  picture_not_starts_with?: String;
  picture_ends_with?: String;
  picture_not_ends_with?: String;
  ibu?: Int;
  ibu_not?: Int;
  ibu_in?: Int[] | Int;
  ibu_not_in?: Int[] | Int;
  ibu_lt?: Int;
  ibu_lte?: Int;
  ibu_gt?: Int;
  ibu_gte?: Int;
  abv?: Float;
  abv_not?: Float;
  abv_in?: Float[] | Float;
  abv_not_in?: Float[] | Float;
  abv_lt?: Float;
  abv_lte?: Float;
  abv_gt?: Float;
  abv_gte?: Float;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  published?: Boolean;
  published_not?: Boolean;
  AND?: BeerScalarWhereInput[] | BeerScalarWhereInput;
  OR?: BeerScalarWhereInput[] | BeerScalarWhereInput;
  NOT?: BeerScalarWhereInput[] | BeerScalarWhereInput;
}

export interface CountryUpdateDataInput {
  countryCode?: String;
  name?: String;
  icon?: String;
}

export interface BeerUpdateWithWhereUniqueWithoutReviewerInput {
  where: BeerWhereUniqueInput;
  data: BeerUpdateWithoutReviewerDataInput;
}

export interface CountryUpsertNestedInput {
  update: CountryUpdateDataInput;
  create: CountryCreateInput;
}

export interface BeerCreateWithoutReviewerInput {
  name: String;
  picture?: String;
  brewery?: BreweryCreateOneInput;
  style?: StyleCreateOneInput;
  glass?: GlassCreateManyInput;
  ibu?: Int;
  abv?: Float;
  description?: String;
  published?: Boolean;
}

export interface LocationUpsertNestedInput {
  update: LocationUpdateDataInput;
  create: LocationCreateInput;
}

export interface StyleUpdateManyMutationInput {
  name?: String;
}

export interface BreweryUpsertNestedInput {
  update: BreweryUpdateDataInput;
  create: BreweryCreateInput;
}

export interface LocationUpdateInput {
  city?: String;
  country?: CountryUpdateOneRequiredInput;
}

export interface StyleUpdateOneInput {
  create?: StyleCreateInput;
  update?: StyleUpdateDataInput;
  upsert?: StyleUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: StyleWhereUniqueInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface StyleUpdateDataInput {
  name?: String;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  beersReviewed_every?: BeerWhereInput;
  beersReviewed_some?: BeerWhereInput;
  beersReviewed_none?: BeerWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface StyleUpsertNestedInput {
  update: StyleUpdateDataInput;
  create: StyleCreateInput;
}

export interface BeerUpdateManyDataInput {
  name?: String;
  picture?: String;
  ibu?: Int;
  abv?: Float;
  description?: String;
  published?: Boolean;
}

export interface GlassUpdateManyInput {
  create?: GlassCreateInput[] | GlassCreateInput;
  update?:
    | GlassUpdateWithWhereUniqueNestedInput[]
    | GlassUpdateWithWhereUniqueNestedInput;
  upsert?:
    | GlassUpsertWithWhereUniqueNestedInput[]
    | GlassUpsertWithWhereUniqueNestedInput;
  delete?: GlassWhereUniqueInput[] | GlassWhereUniqueInput;
  connect?: GlassWhereUniqueInput[] | GlassWhereUniqueInput;
  disconnect?: GlassWhereUniqueInput[] | GlassWhereUniqueInput;
  deleteMany?: GlassScalarWhereInput[] | GlassScalarWhereInput;
  updateMany?:
    | GlassUpdateManyWithWhereNestedInput[]
    | GlassUpdateManyWithWhereNestedInput;
}

export type GlassWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface GlassUpdateWithWhereUniqueNestedInput {
  where: GlassWhereUniqueInput;
  data: GlassUpdateDataInput;
}

export interface LocationUpdateManyMutationInput {
  city?: String;
}

export interface GlassUpdateDataInput {
  name?: String;
}

export interface BreweryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  location?: LocationWhereInput;
  AND?: BreweryWhereInput[] | BreweryWhereInput;
  OR?: BreweryWhereInput[] | BreweryWhereInput;
  NOT?: BreweryWhereInput[] | BreweryWhereInput;
}

export interface GlassUpdateManyDataInput {
  name?: String;
}

export interface GlassUpdateManyWithWhereNestedInput {
  where: GlassScalarWhereInput;
  data: GlassUpdateManyDataInput;
}

export interface GlassScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: GlassScalarWhereInput[] | GlassScalarWhereInput;
  OR?: GlassScalarWhereInput[] | GlassScalarWhereInput;
  NOT?: GlassScalarWhereInput[] | GlassScalarWhereInput;
}

export interface GlassUpsertWithWhereUniqueNestedInput {
  where: GlassWhereUniqueInput;
  update: GlassUpdateDataInput;
  create: GlassCreateInput;
}

export interface BrewerySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BreweryWhereInput;
  AND?: BrewerySubscriptionWhereInput[] | BrewerySubscriptionWhereInput;
  OR?: BrewerySubscriptionWhereInput[] | BrewerySubscriptionWhereInput;
  NOT?: BrewerySubscriptionWhereInput[] | BrewerySubscriptionWhereInput;
}

export interface GlassUpdateInput {
  name?: String;
}

export type LocationWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface BeerUpsertWithWhereUniqueWithoutReviewerInput {
  where: BeerWhereUniqueInput;
  update: BeerUpdateWithoutReviewerDataInput;
  create: BeerCreateWithoutReviewerInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface BreweryEdge {
  node: Brewery;
  cursor: String;
}

export interface BreweryEdgePromise extends Promise<BreweryEdge>, Fragmentable {
  node: <T = BreweryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BreweryEdgeSubscription
  extends Promise<AsyncIterator<BreweryEdge>>,
    Fragmentable {
  node: <T = BrewerySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Glass {
  id: ID_Output;
  name: String;
}

export interface GlassPromise extends Promise<Glass>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface GlassSubscription
  extends Promise<AsyncIterator<Glass>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface BreweryConnection {
  pageInfo: PageInfo;
  edges: BreweryEdge[];
}

export interface BreweryConnectionPromise
  extends Promise<BreweryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BreweryEdge>>() => T;
  aggregate: <T = AggregateBreweryPromise>() => T;
}

export interface BreweryConnectionSubscription
  extends Promise<AsyncIterator<BreweryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BreweryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBrewerySubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StylePreviousValues {
  id: ID_Output;
  name: String;
}

export interface StylePreviousValuesPromise
  extends Promise<StylePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface StylePreviousValuesSubscription
  extends Promise<AsyncIterator<StylePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface StyleSubscriptionPayload {
  mutation: MutationType;
  node: Style;
  updatedFields: String[];
  previousValues: StylePreviousValues;
}

export interface StyleSubscriptionPayloadPromise
  extends Promise<StyleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StylePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StylePreviousValuesPromise>() => T;
}

export interface StyleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StyleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StyleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StylePreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Style {
  id: ID_Output;
  name: String;
}

export interface StylePromise extends Promise<Style>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface StyleSubscription
  extends Promise<AsyncIterator<Style>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateBeer {
  count: Int;
}

export interface AggregateBeerPromise
  extends Promise<AggregateBeer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBeerSubscription
  extends Promise<AsyncIterator<AggregateBeer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StyleEdge {
  node: Style;
  cursor: String;
}

export interface StyleEdgePromise extends Promise<StyleEdge>, Fragmentable {
  node: <T = StylePromise>() => T;
  cursor: () => Promise<String>;
}

export interface StyleEdgeSubscription
  extends Promise<AsyncIterator<StyleEdge>>,
    Fragmentable {
  node: <T = StyleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Beer {
  id: ID_Output;
  name: String;
  picture?: String;
  ibu?: Int;
  abv?: Float;
  description?: String;
  published: Boolean;
}

export interface BeerPromise extends Promise<Beer>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  picture: () => Promise<String>;
  brewery: <T = BreweryPromise>() => T;
  style: <T = StylePromise>() => T;
  glass: <T = FragmentableArray<Glass>>(
    args?: {
      where?: GlassWhereInput;
      orderBy?: GlassOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  ibu: () => Promise<Int>;
  abv: () => Promise<Float>;
  description: () => Promise<String>;
  published: () => Promise<Boolean>;
  reviewer: <T = UserPromise>() => T;
}

export interface BeerSubscription
  extends Promise<AsyncIterator<Beer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  picture: () => Promise<AsyncIterator<String>>;
  brewery: <T = BrewerySubscription>() => T;
  style: <T = StyleSubscription>() => T;
  glass: <T = Promise<AsyncIterator<GlassSubscription>>>(
    args?: {
      where?: GlassWhereInput;
      orderBy?: GlassOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  ibu: () => Promise<AsyncIterator<Int>>;
  abv: () => Promise<AsyncIterator<Float>>;
  description: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  reviewer: <T = UserSubscription>() => T;
}

export interface Brewery {
  id: ID_Output;
  name: String;
}

export interface BreweryPromise extends Promise<Brewery>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  location: <T = LocationPromise>() => T;
}

export interface BrewerySubscription
  extends Promise<AsyncIterator<Brewery>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  location: <T = LocationSubscription>() => T;
}

export interface BeerSubscriptionPayload {
  mutation: MutationType;
  node: Beer;
  updatedFields: String[];
  previousValues: BeerPreviousValues;
}

export interface BeerSubscriptionPayloadPromise
  extends Promise<BeerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BeerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BeerPreviousValuesPromise>() => T;
}

export interface BeerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BeerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BeerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BeerPreviousValuesSubscription>() => T;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BeerPreviousValues {
  id: ID_Output;
  name: String;
  picture?: String;
  ibu?: Int;
  abv?: Float;
  description?: String;
  published: Boolean;
}

export interface BeerPreviousValuesPromise
  extends Promise<BeerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  picture: () => Promise<String>;
  ibu: () => Promise<Int>;
  abv: () => Promise<Float>;
  description: () => Promise<String>;
  published: () => Promise<Boolean>;
}

export interface BeerPreviousValuesSubscription
  extends Promise<AsyncIterator<BeerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  picture: () => Promise<AsyncIterator<String>>;
  ibu: () => Promise<AsyncIterator<Int>>;
  abv: () => Promise<AsyncIterator<Float>>;
  description: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface Location {
  id: ID_Output;
  city?: String;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  id: () => Promise<ID_Output>;
  city: () => Promise<String>;
  country: <T = CountryPromise>() => T;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  city: () => Promise<AsyncIterator<String>>;
  country: <T = CountrySubscription>() => T;
}

export interface BeerEdge {
  node: Beer;
  cursor: String;
}

export interface BeerEdgePromise extends Promise<BeerEdge>, Fragmentable {
  node: <T = BeerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BeerEdgeSubscription
  extends Promise<AsyncIterator<BeerEdge>>,
    Fragmentable {
  node: <T = BeerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GlassEdge {
  node: Glass;
  cursor: String;
}

export interface GlassEdgePromise extends Promise<GlassEdge>, Fragmentable {
  node: <T = GlassPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GlassEdgeSubscription
  extends Promise<AsyncIterator<GlassEdge>>,
    Fragmentable {
  node: <T = GlassSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BrewerySubscriptionPayload {
  mutation: MutationType;
  node: Brewery;
  updatedFields: String[];
  previousValues: BreweryPreviousValues;
}

export interface BrewerySubscriptionPayloadPromise
  extends Promise<BrewerySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BreweryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BreweryPreviousValuesPromise>() => T;
}

export interface BrewerySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BrewerySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BrewerySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BreweryPreviousValuesSubscription>() => T;
}

export interface AggregateCountry {
  count: Int;
}

export interface AggregateCountryPromise
  extends Promise<AggregateCountry>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCountrySubscription
  extends Promise<AsyncIterator<AggregateCountry>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BreweryPreviousValues {
  id: ID_Output;
  name: String;
}

export interface BreweryPreviousValuesPromise
  extends Promise<BreweryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface BreweryPreviousValuesSubscription
  extends Promise<AsyncIterator<BreweryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CountryConnection {
  pageInfo: PageInfo;
  edges: CountryEdge[];
}

export interface CountryConnectionPromise
  extends Promise<CountryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CountryEdge>>() => T;
  aggregate: <T = AggregateCountryPromise>() => T;
}

export interface CountryConnectionSubscription
  extends Promise<AsyncIterator<CountryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CountryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCountrySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBrewery {
  count: Int;
}

export interface AggregateBreweryPromise
  extends Promise<AggregateBrewery>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBrewerySubscription
  extends Promise<AsyncIterator<AggregateBrewery>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CountrySubscriptionPayload {
  mutation: MutationType;
  node: Country;
  updatedFields: String[];
  previousValues: CountryPreviousValues;
}

export interface CountrySubscriptionPayloadPromise
  extends Promise<CountrySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CountryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CountryPreviousValuesPromise>() => T;
}

export interface CountrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CountrySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CountrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CountryPreviousValuesSubscription>() => T;
}

export interface AggregateStyle {
  count: Int;
}

export interface AggregateStylePromise
  extends Promise<AggregateStyle>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStyleSubscription
  extends Promise<AsyncIterator<AggregateStyle>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CountryPreviousValues {
  id: ID_Output;
  countryCode: String;
  name: String;
  icon?: String;
}

export interface CountryPreviousValuesPromise
  extends Promise<CountryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  countryCode: () => Promise<String>;
  name: () => Promise<String>;
  icon: () => Promise<String>;
}

export interface CountryPreviousValuesSubscription
  extends Promise<AsyncIterator<CountryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  countryCode: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BeerConnection {
  pageInfo: PageInfo;
  edges: BeerEdge[];
}

export interface BeerConnectionPromise
  extends Promise<BeerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BeerEdge>>() => T;
  aggregate: <T = AggregateBeerPromise>() => T;
}

export interface BeerConnectionSubscription
  extends Promise<AsyncIterator<BeerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BeerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBeerSubscription>() => T;
}

export interface AggregateGlass {
  count: Int;
}

export interface AggregateGlassPromise
  extends Promise<AggregateGlass>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGlassSubscription
  extends Promise<AsyncIterator<AggregateGlass>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GlassSubscriptionPayload {
  mutation: MutationType;
  node: Glass;
  updatedFields: String[];
  previousValues: GlassPreviousValues;
}

export interface GlassSubscriptionPayloadPromise
  extends Promise<GlassSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GlassPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GlassPreviousValuesPromise>() => T;
}

export interface GlassSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GlassSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GlassSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GlassPreviousValuesSubscription>() => T;
}

export interface CountryEdge {
  node: Country;
  cursor: String;
}

export interface CountryEdgePromise extends Promise<CountryEdge>, Fragmentable {
  node: <T = CountryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CountryEdgeSubscription
  extends Promise<AsyncIterator<CountryEdge>>,
    Fragmentable {
  node: <T = CountrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface LocationPreviousValues {
  id: ID_Output;
  city?: String;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  city: () => Promise<String>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  city: () => Promise<AsyncIterator<String>>;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  beersReviewed: <T = FragmentableArray<Beer>>(
    args?: {
      where?: BeerWhereInput;
      orderBy?: BeerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  beersReviewed: <T = Promise<AsyncIterator<BeerSubscription>>>(
    args?: {
      where?: BeerWhereInput;
      orderBy?: BeerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface GlassPreviousValues {
  id: ID_Output;
  name: String;
}

export interface GlassPreviousValuesPromise
  extends Promise<GlassPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface GlassPreviousValuesSubscription
  extends Promise<AsyncIterator<GlassPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface StyleConnection {
  pageInfo: PageInfo;
  edges: StyleEdge[];
}

export interface StyleConnectionPromise
  extends Promise<StyleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StyleEdge>>() => T;
  aggregate: <T = AggregateStylePromise>() => T;
}

export interface StyleConnectionSubscription
  extends Promise<AsyncIterator<StyleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StyleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStyleSubscription>() => T;
}

export interface Country {
  id: ID_Output;
  countryCode: String;
  name: String;
  icon?: String;
}

export interface CountryPromise extends Promise<Country>, Fragmentable {
  id: () => Promise<ID_Output>;
  countryCode: () => Promise<String>;
  name: () => Promise<String>;
  icon: () => Promise<String>;
}

export interface CountrySubscription
  extends Promise<AsyncIterator<Country>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  countryCode: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
}

export interface GlassConnection {
  pageInfo: PageInfo;
  edges: GlassEdge[];
}

export interface GlassConnectionPromise
  extends Promise<GlassConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GlassEdge>>() => T;
  aggregate: <T = AggregateGlassPromise>() => T;
}

export interface GlassConnectionSubscription
  extends Promise<AsyncIterator<GlassConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GlassEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGlassSubscription>() => T;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Beer",
    embedded: false
  },
  {
    name: "Brewery",
    embedded: false
  },
  {
    name: "Country",
    embedded: false
  },
  {
    name: "Glass",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  },
  {
    name: "Style",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
